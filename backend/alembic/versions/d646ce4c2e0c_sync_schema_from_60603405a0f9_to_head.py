"""Sync schema from 60603405a0f9 to head

Revision ID: d646ce4c2e0c
Revises: 60603405a0f9
Create Date: 2025-04-08 17:01:20.424186

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy


# revision identifiers, used by Alembic.
revision: str = 'd646ce4c2e0c'
down_revision: Union[str, None] = '60603405a0f9'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('simulations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('current_tick', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_simulations_name'), 'simulations', ['name'], unique=False)
    op.create_table('agents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('simulation_id', sa.UUID(), nullable=False),
    sa.Column('archetype', sa.String(), nullable=True),
    sa.Column('demographics', sa.JSON(), nullable=False),
    sa.Column('behavioral_traits', sa.JSON(), nullable=False),
    sa.Column('beliefs', sa.JSON(), nullable=False),
    sa.Column('short_term_memory', sa.JSON(), nullable=False),
    sa.ForeignKeyConstraint(['simulation_id'], ['simulations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('simulation_id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('parameters', sa.JSON(), nullable=False),
    sa.Column('target_tick', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('triggered_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['simulation_id'], ['simulations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_events_event_type'), 'events', ['event_type'], unique=False)
    op.create_index(op.f('ix_events_simulation_id'), 'events', ['simulation_id'], unique=False)
    op.create_index(op.f('ix_events_status'), 'events', ['status'], unique=False)
    op.create_index(op.f('ix_events_target_tick'), 'events', ['target_tick'], unique=False)
    op.create_table('metric_snapshots',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('simulation_id', sa.UUID(), nullable=False),
    sa.Column('tick', sa.Integer(), nullable=False),
    sa.Column('gini_coefficient', sa.Float(), nullable=True),
    sa.Column('belief_variance', sa.Float(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['simulation_id'], ['simulations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_metric_snapshots_simulation_id'), 'metric_snapshots', ['simulation_id'], unique=False)
    op.create_index(op.f('ix_metric_snapshots_tick'), 'metric_snapshots', ['tick'], unique=False)
    op.create_table('agent_connections',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('source_agent_id', sa.UUID(), nullable=False),
    sa.Column('target_agent_id', sa.UUID(), nullable=False),
    sa.Column('influence_factor', sa.Float(), nullable=False),
    sa.Column('relationship_type', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['source_agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_agent_id'], ['agents.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_connections_id'), 'agent_connections', ['id'], unique=False)
    op.create_index(op.f('ix_agent_connections_source_agent_id'), 'agent_connections', ['source_agent_id'], unique=False)
    op.create_index(op.f('ix_agent_connections_target_agent_id'), 'agent_connections', ['target_agent_id'], unique=False)
    
    # Ensure vector extension is enabled before creating the table that uses it
    op.execute("CREATE EXTENSION IF NOT EXISTS vector;")

    op.create_table('agent_long_term_memories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('simulation_id', sa.UUID(), nullable=False),
    sa.Column('memory_text', sa.Text(), nullable=False),
    sa.Column('memory_embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('importance_score', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['simulation_id'], ['simulations.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_agent_long_term_memories_agent_id'), 'agent_long_term_memories', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_long_term_memories_id'), 'agent_long_term_memories', ['id'], unique=False)
    op.create_index(op.f('ix_agent_long_term_memories_simulation_id'), 'agent_long_term_memories', ['simulation_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_agent_long_term_memories_simulation_id'), table_name='agent_long_term_memories')
    op.drop_index(op.f('ix_agent_long_term_memories_id'), table_name='agent_long_term_memories')
    op.drop_index(op.f('ix_agent_long_term_memories_agent_id'), table_name='agent_long_term_memories')
    op.drop_table('agent_long_term_memories')
    op.drop_index(op.f('ix_agent_connections_target_agent_id'), table_name='agent_connections')
    op.drop_index(op.f('ix_agent_connections_source_agent_id'), table_name='agent_connections')
    op.drop_index(op.f('ix_agent_connections_id'), table_name='agent_connections')
    op.drop_table('agent_connections')
    op.drop_index(op.f('ix_metric_snapshots_tick'), table_name='metric_snapshots')
    op.drop_index(op.f('ix_metric_snapshots_simulation_id'), table_name='metric_snapshots')
    op.drop_table('metric_snapshots')
    op.drop_index(op.f('ix_events_target_tick'), table_name='events')
    op.drop_index(op.f('ix_events_status'), table_name='events')
    op.drop_index(op.f('ix_events_simulation_id'), table_name='events')
    op.drop_index(op.f('ix_events_event_type'), table_name='events')
    op.drop_table('events')
    op.drop_table('agents')
    op.drop_index(op.f('ix_simulations_name'), table_name='simulations')
    op.drop_table('simulations')
    # ### end Alembic commands ###
